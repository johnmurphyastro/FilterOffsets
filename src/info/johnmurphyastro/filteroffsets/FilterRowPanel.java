/*
 * Filter Offset is used to store filter focusOffset positions and flat exposure times
 * Copyright (C) 2019  John Murphy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package info.johnmurphyastro.filteroffsets;

import java.text.NumberFormat;
import javax.swing.text.NumberFormatter;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;

/**
 *
 * @author John Murphy
 */
public class FilterRowPanel extends javax.swing.JPanel {

    private int nthFilter;
    private FilterOffsetFrame controller;

    /**
     * Creates new form FilterPanel
     */
    public FilterRowPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flatExposure = new JFormattedTextField(getFloatFormatter());
        focusOffset = new JFormattedTextField(getFormatter(false));
        focusPosition = new JFormattedTextField(getFormatter(true));
        filterName = new javax.swing.JTextField();
        setFocusPositionButton = new javax.swing.JButton();

        flatExposure.setText("1");
        flatExposure.setToolTipText("");

        focusOffset.setText("0");
        focusOffset.setToolTipText("");

        focusPosition.setEditable(false);
        focusPosition.setText("4000");
        focusPosition.setToolTipText("");

        filterName.setText("Empty");

        setFocusPositionButton.setText("Set");
        setFocusPositionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFocusPositionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(flatExposure, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(focusOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(focusPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setFocusPositionButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flatExposure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(focusOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(focusPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setFocusPositionButton))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setFocusPositionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFocusPositionButtonActionPerformed
        String filter = filterName.getText();
        String position = JOptionPane.showInputDialog(this, filter + " focus position?", "Enter " + filter + " focus position", JOptionPane.QUESTION_MESSAGE);
        if (position != null){
            controller.setFocusPositions(getValues(), position);
        }
    }//GEN-LAST:event_setFocusPositionButtonActionPerformed

    private NumberFormatter getFormatter(boolean positiveOnly){
        NumberFormat format = NumberFormat.getInstance();
        format.setGroupingUsed(true);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Integer.class);
        if (positiveOnly){
            formatter.setMinimum(0);
        }
        return formatter;
    }
    
    private NumberFormatter getFloatFormatter(){
        NumberFormat format = NumberFormat.getInstance();
        format.setMaximumFractionDigits(3);
        format.setMinimumFractionDigits(1);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setMinimum(0.0);
        return formatter;
    }
    
    public void setValues(Filter filter){
        filterName.setText(filter.getName());
        flatExposure.setValue(filter.getFlatExposure());
        focusOffset.setValue(filter.getFocusOffset());
    }
    
    public int getOffset(){
        return getIntValue(focusOffset);
    }
    
    public int getFocusPosition() {
        return getIntValue(focusPosition);
    }
    
    public void setFocusPosition(int position){
        focusPosition.setValue(position);
    }
    
    public Filter getValues(){
        return new Filter(
                nthFilter,
                filterName.getText(),
                getDoubleValue(flatExposure),
                getIntValue(focusOffset)
            );
    }

    private int getIntValue(JFormattedTextField formattedTextField){
        Object obj = formattedTextField.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }
    
    private double getDoubleValue(JFormattedTextField formattedTextField){
        Object obj = formattedTextField.getValue();
        if (obj instanceof Number){
            return ((Number)obj).doubleValue();
        }
        return 0.0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filterName;
    private javax.swing.JFormattedTextField flatExposure;
    private javax.swing.JFormattedTextField focusOffset;
    private javax.swing.JFormattedTextField focusPosition;
    private javax.swing.JButton setFocusPositionButton;
    // End of variables declaration//GEN-END:variables

    void setController(FilterOffsetFrame controller, int nthFilter) {
        this.controller = controller;
        this.nthFilter = nthFilter;
    }
}
